(* Charatcters *)

uppercase_letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;

lowercase_letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;

letter = uppercase_letter | lowercase_letter ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;



(* Identifiers *)

identifier = letter, { letter | digit | "_" } ;



(* Literals *)

integer_literal = digit, { digit } ;

string_literal = '"', { letter | digit }, '"' ;

formatted_string_literal = 'f"', { letter | digit | '{', expression, '}' }, '"' ;

boolean_literal = "true" | "false" ;



(* Type Rules *)

type = primitive_type | identifier ;

primitive_type = "int" | "char" | "bool" | "void" ;



(* Declaration Rules *)

program = { declaration } ;

declaration = typedef_declaration | function_declaration | class_declaration ;

typedef_declaration = "typedef", type, identifier, ";" ;

variable_declaration = type, identifier, [ "=", expression ], ";" ;

function_declaration = type, identifier, "(", [ parameter_list ], ")", block, ";" ;

parameter_list = parameter, { ",", parameter } ;

parameter = type, identifier ;

statement = simple_statement | compound_statement ;

simple_statement = variable_declaration | assignment_statement | function_call_statement | return_statement | ";" ;

compound_statement = if_statement | while_statement | for_statement | block ;

block = "{", { statement }, "}" ;

assignment_statement = expression, "=", expression, ";" ;

function_call_statement = function_call, ";" ;

return_statement = "return", [ expression ], ";" ;

if_statement = "if", "(", expression, ")", statement, [ "else", statement ] ;

while_statement = "while", "(", expression, ")", statement ;

for_statement = "for", "(", simple_statement, expression, ";", expression, ")", statement ;

expression = equality_expression ;

equality_expression = comparison_expression, { ("==" | "!="), comparison_expression } ;

comparison_expression = additive_expression, { ("<" | ">" | "<=" | ">="), additive_expression } ;

additive_expression = multiplicative_expression, { ("+" | "-"), multiplicative_expression } ;

multiplicative_expression = unary_expression, { ("*" | "/"), unary_expression } ;

unary_expression = postfix_expression | ("-" | "!"), unary_expression ;

postfix_expression = primary_expression, { ".", identifier | function_call_args } ;

primary_expression = identifier | integer_literal | string_literal | formatted_string_literal | boolean_literal | "(", expression, ")" | "this" ;

function_call = identifier, function_call_args ;

function_call_args = "(", [ argument_list ], ")" ;

argument_list = expression, { ",", expression } ;

class_declaration = "class", identifier, "{", { class_member }, "}", ";" ;

class_member = variable_declaration | method_declaration ;

method_declaration = type, identifier, "(", [ parameter_list ], ")", block, ";" ;

print_statement = "print", "(", (string_literal | formatted_string_literal), ")", ";" ;

